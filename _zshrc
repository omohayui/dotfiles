# zshrc
# License : MIT
# http://mollifier.mit-license.org/

########################################
# 環境変数
export LANG=ja_JP.UTF-8
export PATH=/usr/local/bin:/usr/local:$PATH

# 色を使用出来るようにする
autoload -Uz colors
colors

# vim
export EDITOR=vim
bindkey -v
alias vim='/opt/homebrew/bin/nvim "$@"'
alias gitdiff='git difftool --tool=vimdiff --no-prompt'
alias gitlog='git log --graph --date-order -C -M --pretty=format:"<%h> %ad [%an] %Cgreen%d%Creset %s" --all --date=short'

# ヒストリの設定
export HISTFILE=~/.zsh_history
export HISTSIZE=1000000
export SAVEHIST=1000000
setopt EXTENDED_HISTORY
setopt hist_ignore_dups
setopt hist_reduce_blanks
alias history='history -E 1'

########################################
# プロンプト
# vcs_infoロード
autoload -Uz vcs_info
autoload -Uz add-zsh-hook
# PROMPT変数内で変数参照する
setopt prompt_subst

# vcsの表示
zstyle ':vcs_info:*' formats '%s][*%F{blue}%b%f'
zstyle ':vcs_info:*' actionformats '%s][*%F{blue}%b%f(%F{red}%a%f)'

function _update_vcs_info_msg() {
    LANG=en_US.UTF-8 vcs_info
    PROMPT="%{${fg[cyan]}%}[%n]%{${reset_color}%}[${vcs_info_msg_0_}]%{${reset_color}%} %~
%# "
}
add-zsh-hook precmd _update_vcs_info_msg

# 単語の区切り文字を指定する
autoload -Uz select-word-style
select-word-style default
# ここで指定した文字は単語区切りとみなされる
# / も区切りと扱うので、^W でディレクトリ１つ分を削除できる
zstyle ':zle:*' word-chars " /=;@:{},|"
zstyle ':zle:*' word-style unspecified

########################################
# 補完
# 補完機能を有効にする
autoload -Uz compinit
compinit

# 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# ../ の後は今いるディレクトリを補完しない
zstyle ':completion:*' ignore-parents parent pwd ..

# sudo の後ろでコマンド名を補完する
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
                   /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin

# ps コマンドのプロセス名補完
zstyle ':completion:*:processes' command 'ps x -o pid,s,args'


########################################
# オプション
# 日本語ファイル名を表示可能にする
setopt print_eight_bit

# beep を無効にする
setopt no_beep

# フローコントロールを無効にする
setopt no_flow_control

# '#' 以降をコメントとして扱う
setopt interactive_comments

# ディレクトリ名だけでcdする
setopt auto_cd

# cd したら自動的にpushdする
setopt auto_pushd
# 重複したディレクトリを追加しない
setopt pushd_ignore_dups

# 同時に起動したzshの間でヒストリを共有する
setopt share_history

# 同じコマンドをヒストリに残さない
setopt hist_ignore_all_dups

# スペースから始まるコマンド行はヒストリに残さない
setopt hist_ignore_space

# ヒストリに保存するときに余分なスペースを削除する
setopt hist_reduce_blanks

# Wildcard が jq や curl で邪魔なので無効にする
setopt +o nomatch

########################################
# キーバインド

# ^R で履歴検索をするときに * でワイルドカードを使用出来るようにする
bindkey '^R' history-incremental-pattern-search-backward
bindkey "^s" history-incremental-pattern-search-forward
bindkey -e

########################################
# エイリアス

alias la='ls -a'
alias ll='ls -l'
alias rm='rm -i'
alias mkdir='mkdir -p'
alias grep='grep --color=auto'
alias gl='gcloud auth login'
alias k='kubectl'

# sudo の後のコマンドでエイリアスを有効にする
alias sudo='sudo '

# グローバルエイリアス
alias -g L='| less'
alias -g G='| grep'

# C で標準出力をクリップボードにコピーする
if which pbcopy >/dev/null 2>&1 ; then
    # Mac
    alias -g C='| pbcopy'
elif which xsel >/dev/null 2>&1 ; then
    # Linux
    alias -g C='| xsel --input --clipboard'
fi

########################################
# OS 別の設定
case ${OSTYPE} in
    darwin*)
        #Mac用の設定
        export CLICOLOR=1
        alias ls='ls -G -F'
        ;;
    linux*)
        #Linux用の設定
        alias ls='ls -F --color=auto'
        ;;
esac

[[ -d ~/.rbenv  ]] && \
  export PATH=${HOME}/.rbenv/bin:${PATH} && \
  eval "$(rbenv init -)"


#eval `ssh-agent`

#KEY_FILENAME=''
#PASSPHRASE=''

#expect -c "
#set timeout -1
#spawn ssh-add $HOME/.ssh/$KEY_FILENAME
#expect {
#    \"Enter passphrase for\" {
#        send \"$PASSPHRASE\r\"
#    }
#}
#expect {
#    \"denied\" { exit 1 }
#    eof { exit 0 }
#}
#"

source $HOME/perl5/perlbrew/etc/bashrc
source $HOME/perl5/perlbrew/etc/perlbrew-completion.bash

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/shims:$PATH"
eval "$(pyenv init -)"

function cdup() {
    echo
    cd ..
    zle reset-prompt
}
zle -N cdup
bindkey '^\^' cdup

eval "$(direnv hook zsh)"

# The next line updates PATH for the Google Cloud SDK.
if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then source "$HOME/google-cloud-sdk/path.zsh.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then source "$HOME/google-cloud-sdk/completion.zsh.inc"; fi

# go
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# flutter
export PATH=$HOME/flutter/bin:$PATH

# node
export PATH="$HOME/.nodenv/bin:$PATH"
eval "$(nodenv init -)"

# private settings
if [ -f ~/.zsh/zsh_private ]; then
    source ~/.zsh/zsh_private
else
    print "404: ~/.zsh/zsh_private not found."
fi
